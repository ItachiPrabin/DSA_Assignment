/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package socialmediaapplication;

import java.awt.Font;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import socialmediaapplication.dbConnection;
import java.awt.event.ActionEvent;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import static socialmediaapplication.Graph.initiateGraph;



/**
 *
 * @author Acer
 */
public class dashboard extends javax.swing.JFrame {
    private int userID; // ID of the current user
    private int clickPost; // To keep track of clicked posts
    DefaultTableModel model; // Table model for posts
    DefaultTableModel model2; // Table model for recommended users
    Graph userGraph= new Graph(); // Graph object to handle social connections
    /**
     * Creates new form dashboard
     */
    public dashboard(int userID) {
        this.userID = userID;
        System.out.println("Logged in as " + userID);
        initComponents(); // Initialize components of the dashboard
        initiateGraph(userGraph); // Initialize the social graph
        setReccomendedFriends(recommend); // Set recommended friends for the user
        System.out.println("Test: " + userGraph.suggestUsersToFollow(userID));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        peoplePanel = new javax.swing.JPanel();
        followButton = new javax.swing.JButton();
        followUser = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        postFieldd = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        recommend = new javax.swing.JTable();
        PostCategory = new javax.swing.JComboBox<>();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        peoplePanel.setBackground(new java.awt.Color(102, 102, 0));
        peoplePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        followButton.setText("Follow");
        followButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                followButtonActionPerformed(evt);
            }
        });
        peoplePanel.add(followButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 210, -1, -1));

        followUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                followUserActionPerformed(evt);
            }
        });
        peoplePanel.add(followUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 330, 30));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("People you may know!!");
        peoplePanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, -1, -1));

        getContentPane().add(peoplePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 490, 440, 330));

        jButton1.setText("Create Post");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1createBtnActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 260, 110, 30));

        postFieldd.setColumns(20);
        postFieldd.setRows(5);
        jScrollPane3.setViewportView(postFieldd);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 850, 70));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setText("Hello, you are welcome!!");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 30, -1, -1));

        jButton3.setText("View Post");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 260, 110, 30));

        recommend.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Reccomended Users"
            }
        ));
        jScrollPane1.setViewportView(recommend);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 490, 510, 330));

        PostCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gaming", "Music", "Events", "Hobbies", "Art", "Anime", " ", " " }));
        getContentPane().add(PostCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 100, -1, -1));

        jButton4.setText("Log Out");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 0, 110, 30));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    private void jButton1createBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1createBtnActionPerformed
        // TODO add your handling code here:
//        new UserPost().setVisible(true);
        String content= postFieldd.getText(); // Get post content from the text area
        createPost(content, PostCategory); // Create Post
    }//GEN-LAST:event_jButton1createBtnActionPerformed

    private void followButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_followButtonActionPerformed
        // TODO add your handling code here:
        String usernameToFollow = followUser.getText().trim(); // Get the username to follow
    
    // Call the followUser method with the current user's ID and the username to follow
    followUser(userID, usernameToFollow); // Follow the user
    setReccomendedFriends(recommend); // Update recommended friends list
    }//GEN-LAST:event_followButtonActionPerformed

    private void followUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_followUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_followUserActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    new viewpost(userID).setVisible(true);
    this.dispose();
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        new signin().setVisible(true);
                
                dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

   // Method to retrieve the username of a user based on their ID
    public String getUsernameByUserId(int userId) {
        // Database connection
        String followed_users = null;
        Connection conn = dbConnection.dbconnect();
        
        try {
            // Prepare SQL query
            String query = "SELECT UserName FROM users WHERE UserId = ?";
            
            // Execute query
            PreparedStatement pstmt = conn.prepareStatement(query);
            pstmt.setInt(1, userId);
            ResultSet rs = pstmt.executeQuery();
            
            // Process the result set
            if (rs.next()) {
                followed_users = rs.getString("username");
            }
            conn.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        return followed_users;
    }

    // Method to populate the table with post records
    public void setRecordsToTable(JTable Tablee) {
        try {
            // Database connection
            Connection con = dbConnection.dbconnect();
            PreparedStatement pst = con.prepareStatement("select * from Posts");
            ResultSet rs = pst.executeQuery();
            
            // Process result set and add rows to the table model
            while (rs.next()) {
                String UserId = rs.getString("userID");
                int UserIdInt= Integer.parseInt(UserId);
                String enter_username = getUsernameByUserId(UserIdInt);
                String Content = rs.getString("content"); 
                System.out.println(Content);
                int likes = rs.getInt("like_count");
                Object[] obj = {enter_username, Content,likes};
                model = (DefaultTableModel)Tablee.getModel();
                model.addRow(obj);
            }
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Method to handle following a user
    private void followUser(int followerId, String followeeUsername) {
        Connection conn = dbConnection.dbconnect();
        
        try {
            // Prepare SQL statement to get follower's username
            PreparedStatement getFollowerStmt = conn.prepareStatement("SELECT UserName FROM Users WHERE UserId = ?");
            getFollowerStmt.setInt(1, followerId);
            ResultSet followerResult = getFollowerStmt.executeQuery();
            String followerName = "";
            if (followerResult.next()) {
                followerName = followerResult.getString("UserName");
            }
            getFollowerStmt.close();

            // Prepare SQL statement to get followee's ID
            PreparedStatement getIdStmt = conn.prepareStatement("SELECT UserId FROM Users WHERE UserName = ?");
            getIdStmt.setString(1, followeeUsername);
            ResultSet followeeIdResult = getIdStmt.executeQuery();
            int followeeId = -1; // Initialize to an invalid value
            if (followeeIdResult.next()) {
                followeeId = followeeIdResult.getInt("UserId");
            } else {
                JOptionPane.showMessageDialog(null, "User with username " + followeeUsername + " does not exist.");
                return; // Exit the method if the user does not exist
            }

            // Insert follow relationship into the Edge table
            PreparedStatement pstmt = conn.prepareStatement("INSERT INTO Edge (follower_id, followee_id) VALUES (?, ?)");
            pstmt.setInt(1, followerId);
            pstmt.setInt(2, followeeId);
            pstmt.executeUpdate();

            // Close statements
            pstmt.close();
            getIdStmt.close();
            conn.close();
            
            // Show message dialog indicating successful follow
            JOptionPane.showMessageDialog(null, followerName + " now follows " + followeeUsername);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    // Method to create a post
    private void createPost(String content, JComboBox<String> PostCategory) {
        Connection conn = dbConnection.dbconnect();

        try {
            // Get the selected category name from the JComboBox
            String categoryName = (String) PostCategory.getSelectedItem();

            // Query the database to get the category ID based on the selected category name
            int categoryID = -1; // Initialize to an invalid value
            String query = "SELECT CategoryId FROM Categories WHERE CategoryName = ?";
            try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                pstmt.setString(1, categoryName);
                ResultSet resultSet = pstmt.executeQuery();
                if (resultSet.next()) {
                    categoryID = resultSet.getInt("CategoryId");
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }

            // Insert the post into the database with the retrieved category ID
            String insertQuery = "INSERT INTO Posts (content, userID, category_id) VALUES (?, ?, ?)";
            try (PreparedStatement pstmt = conn.prepareStatement(insertQuery)) {
                pstmt.setString(1, content); 
                pstmt.setInt(2, userID);
                pstmt.setInt(3, categoryID); // Set the category ID

                pstmt.executeUpdate();
                JOptionPane.showMessageDialog(null, "Posted Successfully");
                setReccomendedFriends(recommend);
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                conn.close();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    // Method to set recommended friends for the current user
    public void setReccomendedFriends(JTable recommend) {
        DefaultTableModel tableModel = (DefaultTableModel) recommend.getModel();
        tableModel.setRowCount(0);
        List<Integer> reccomendedUsers = userGraph.suggestUsersToFollow(userID);
        
        // Iterate through recommended users and add them to the table model
        for (Integer user : reccomendedUsers) {
            String username = getUsernameByUserId(user);
            System.out.println(username);
            Object[] row = {username};
            model2 = (DefaultTableModel)recommend.getModel();
            model2.addRow(row);
        }
    }

    // Main method to run the dashboard interface
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new dashboard(0).setVisible(true); // Open dashboard interface for user ID 0
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> PostCategory;
    private javax.swing.JButton followButton;
    private javax.swing.JTextField followUser;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel peoplePanel;
    private javax.swing.JTextArea postFieldd;
    private javax.swing.JTable recommend;
    // End of variables declaration//GEN-END:variables
}
